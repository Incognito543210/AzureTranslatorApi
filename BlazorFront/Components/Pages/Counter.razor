@using System.Collections.Generic
@using System
@using System.Threading.Tasks
@using BlazorFront.Services
@using Microsoft.AspNetCore.Components
@page "/translate"
@inject BlazorFront.Services.FileService FileService
@inject BlazorFront.Services.TranslateService TranslateService
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Translate</PageTitle>

<h1>Translate</h1>


<div>

    <label for="fP">File Path:</label>
    <input id="fP" @bind="filePathTranslate" />
    <button class="btn btn-primary" @onclick="SendFile">Send file</button>


</div>

<div>
    <label for="inL">Document language:</label>
    <input id="inL" @bind="inputLanguage" />

    <label for="outL">Translate to language:</label>
    <input id="outL" @bind="outputLanguage" />

    <button class="btn btn-primary" @onclick="Translate">Translate</button>
</div>

@if (showMessageSend)
{
    <div class="alert alert-info mt-3" role="alert">
        File send, choice language and clik "Translate".
    </div>
}


@if (showMessage)
{
    <div class="alert alert-info mt-3" role="alert">
        Translation sent, go to the Download File.
    </div>
}

@if (showMessageEmptyInput)
{
    <div class="alert alert-info mt-3" role="alert">
        Enter the some value.
    </div>
}


@if (errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

<div class="mt-3">
    <label><strong>Available Languages:</strong></label>
    <ul>
        @foreach (var lang in languageList)
        {
            <li>@lang</li>
        }
    </ul>
</div>

@code {

    private List<string> errors = new();
    private string filePathTranslate = "";


    private int currentCount = 0;
    private string inputLanguage = "";
    private string outputLanguage = "";
    private bool showMessage = false;
    private bool showMessageEmptyInput = false;
    private bool showMessageSend = false;
    private List<string> languageList = new List<string>();



    protected override async Task OnInitializedAsync()
    {
        // Read languages from the file during initialization
        string filePath = ".\\Components\\Languages.txt"; // Update with your file path
        languageList = await ReadLanguagesFromFile(filePath);
    }

    private async Task<List<string>> ReadLanguagesFromFile(string filePath)
    {
        try
        {
            // Read all lines from the file
            string[] lines = await System.IO.File.ReadAllLinesAsync(filePath);
            return lines.ToList();
        }
        catch (Exception ex)
        {
            // Handle file reading errors
            Console.WriteLine($"Error reading file: {ex.Message}");
            return new List<string>();
        }
    }


    private void clearInputLanguage()
    {
        inputLanguage = "";
        outputLanguage = "";
    }
    private void clearInputSend()
    {
        filePathTranslate = "";
    }

    private async Task SendFile()
    {
        showMessageSend = true;
        await FileService.DeleteInputsAsync();
        try
        {

            string correctfilePath = correctString(filePathTranslate);

            var result = await FileService.UploadAsync(correctfilePath);


        }catch(Exception ex)
        {
            Console.WriteLine($"Translation error: {ex.Message}");
        }

        clearInputSend();

    }

    private async Task Translate()
    {
      

        if (inputLanguage.Equals("") || outputLanguage.Equals(""))
        {
            showMessageEmptyInput = true;
        }
        else
        {

            try
            {
                // Call TranslateAsync method from TranslateService
                var result = await TranslateService.TranslateAsync(inputLanguage, outputLanguage);
                // You can do something with the translation result if needed
                Console.WriteLine(result);
                showMessage = true;
            }
            catch (Exception ex)
            {
                // Handle exceptions if necessary
                Console.WriteLine($"Translation error: {ex.Message}");
            }

            clearInputLanguage();
        }
    }

    private string correctString(string path)
    {
        string correctstring = path;
        correctstring = correctstring.Trim('"');
        correctstring = correctstring.Replace("\\", ";");
        correctstring = correctstring.Trim('"');
        return correctstring;
    }
}